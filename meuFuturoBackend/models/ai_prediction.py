"""
AI Prediction model for storing AI-generated insights and predictions.

Stores various types of financial predictions and insights generated by AI models.
"""

from datetime import date, datetime
from decimal import Decimal
from typing import Optional
from sqlalchemy import String, Numeric, Date, DateTime, Text, ForeignKey, JSON, Float, Enum as SQLEnum
from sqlalchemy.orm import Mapped, mapped_column, relationship
from uuid import uuid4
import enum

from core.database import Base
from models.base import TimestampMixin


class PredictionType(str, enum.Enum):
    """Prediction type enumeration."""
    SAVINGS_PROJECTION = "savings_projection"  # Projeção de poupança
    EXPENSE_FORECAST = "expense_forecast"  # Previsão de gastos
    INCOME_PREDICTION = "income_prediction"  # Predição de receita
    BUDGET_RECOMMENDATION = "budget_recommendation"  # Recomendação de orçamento
    GOAL_TIMELINE = "goal_timeline"  # Timeline para metas
    SPENDING_PATTERN = "spending_pattern"  # Padrão de gastos
    FINANCIAL_HEALTH = "financial_health"  # Saúde financeira
    CUSTOM = "custom"  # Personalizado


class PredictionStatus(str, enum.Enum):
    """Prediction status enumeration."""
    ACTIVE = "active"
    ARCHIVED = "archived"
    DISMISSED = "dismissed"


class AIPrediction(Base, TimestampMixin):
    """
    AI Prediction model for storing AI-generated insights and predictions.
    
    Attributes:
        id: Unique prediction identifier (UUID)
        type: Type of prediction
        title: Prediction title
        description: Detailed description
        confidence_score: AI confidence level (0.0-1.0)
        predicted_value: Main predicted value
        prediction_date: Date this prediction was made for
        expires_at: When this prediction expires
        status: Current prediction status
        metadata: Additional data as JSON
        user_id: Owner of the prediction
    """
    
    __tablename__ = "ai_predictions"
    
    # Primary key
    id: Mapped[str] = mapped_column(
        String(36),
        primary_key=True,
        default=lambda: str(uuid4()),
        doc="Unique prediction identifier"
    )
    
    # Prediction information
    type: Mapped[PredictionType] = mapped_column(
        SQLEnum(PredictionType),
        nullable=False,
        doc="Type of prediction"
    )
    
    title: Mapped[str] = mapped_column(
        String(255),
        nullable=False,
        doc="Prediction title"
    )
    
    description: Mapped[str] = mapped_column(
        Text,
        nullable=False,
        doc="Detailed description"
    )
    
    # AI metrics
    confidence_score: Mapped[float] = mapped_column(
        Float,
        nullable=False,
        doc="AI confidence level (0.0-1.0)"
    )
    
    # Prediction data
    predicted_value: Mapped[Optional[Decimal]] = mapped_column(
        Numeric(precision=15, scale=2),
        nullable=True,
        doc="Main predicted value (monetary)"
    )
    
    prediction_date: Mapped[Optional[date]] = mapped_column(
        Date,
        nullable=True,
        doc="Date this prediction was made for"
    )
    
    expires_at: Mapped[Optional[datetime]] = mapped_column(
        DateTime(timezone=True),
        nullable=True,
        doc="When this prediction expires"
    )
    
    # Status
    status: Mapped[PredictionStatus] = mapped_column(
        SQLEnum(PredictionStatus),
        default=PredictionStatus.ACTIVE,
        nullable=False,
        doc="Current prediction status"
    )
    
    # Additional data
    prediction_metadata: Mapped[Optional[dict]] = mapped_column(
        JSON,
        nullable=True,
        doc="Additional prediction data as JSON"
    )
    
    # Relationships
    user_id: Mapped[str] = mapped_column(
        String(36),
        ForeignKey("users.id", ondelete="CASCADE"),
        nullable=False,
        doc="Owner of the prediction"
    )
    
    # Relationships
    user: Mapped["User"] = relationship(
        "User",
        back_populates="predictions"
    )
    
    def __repr__(self) -> str:
        return (
            f"<AIPrediction(id='{self.id}', type='{self.type}', "
            f"title='{self.title}', confidence={self.confidence_score})>"
        )
    
    @property
    def confidence_percentage(self) -> int:
        """Get confidence score as percentage (0-100)."""
        return int(self.confidence_score * 100)
    
    @property
    def is_high_confidence(self) -> bool:
        """Check if this is a high confidence prediction."""
        from core.config import settings
        return self.confidence_score >= settings.AI_CONFIDENCE_THRESHOLD
    
    @property
    def is_expired(self) -> bool:
        """Check if this prediction has expired."""
        if not self.expires_at:
            return False
        
        return datetime.utcnow() > self.expires_at
    
    @property
    def days_until_expiry(self) -> Optional[int]:
        """Calculate days until prediction expires."""
        if not self.expires_at:
            return None
        
        now = datetime.utcnow()
        if self.expires_at <= now:
            return 0
        
        return (self.expires_at - now).days
    
    def archive(self) -> None:
        """Archive this prediction."""
        self.status = PredictionStatus.ARCHIVED
    
    def dismiss(self) -> None:
        """Dismiss this prediction."""
        self.status = PredictionStatus.DISMISSED
    
    def get_metadata_value(self, key: str, default=None):
        """Get a specific metadata value."""
        if not self.prediction_metadata:
            return default
        return self.prediction_metadata.get(key, default)
    
    def set_metadata_value(self, key: str, value) -> None:
        """Set a specific metadata value."""
        if not self.prediction_metadata:
            self.prediction_metadata = {}
        self.prediction_metadata[key] = value
    
    def is_owned_by(self, user_id: str) -> bool:
        """Check if this prediction belongs to the given user."""
        return self.user_id == user_id
